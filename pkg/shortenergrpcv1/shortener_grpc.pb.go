// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: shortener.proto

package shortenergrpcv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortenerV1_ReadURL_FullMethodName        = "/shortenergrpcv1.ShortenerV1/ReadURL"
	ShortenerV1_Ping_FullMethodName           = "/shortenergrpcv1.ShortenerV1/Ping"
	ShortenerV1_UserURLs_FullMethodName       = "/shortenergrpcv1.ShortenerV1/UserURLs"
	ShortenerV1_DeleteUserURLs_FullMethodName = "/shortenergrpcv1.ShortenerV1/DeleteUserURLs"
	ShortenerV1_WriteURL_FullMethodName       = "/shortenergrpcv1.ShortenerV1/WriteURL"
	ShortenerV1_Shorten_FullMethodName        = "/shortenergrpcv1.ShortenerV1/Shorten"
	ShortenerV1_ShortenBatch_FullMethodName   = "/shortenergrpcv1.ShortenerV1/ShortenBatch"
	ShortenerV1_Stats_FullMethodName          = "/shortenergrpcv1.ShortenerV1/Stats"
)

// ShortenerV1Client is the client API for ShortenerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerV1Client interface {
	// public
	ReadURL(ctx context.Context, in *ReadURLRequest, opts ...grpc.CallOption) (*ReadURLResponse, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// with guard (if there is no valid token returns error 401 Unauthorized)
	UserURLs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserURLsResponse, error)
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// with secure cookie (if there is no valid token assigns a new token)
	WriteURL(ctx context.Context, in *WriteURLRequest, opts ...grpc.CallOption) (*WriteURLResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	ShortenBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error)
	// trusted subnet
	Stats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type shortenerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewShortenerV1Client(cc grpc.ClientConnInterface) ShortenerV1Client {
	return &shortenerV1Client{cc}
}

func (c *shortenerV1Client) ReadURL(ctx context.Context, in *ReadURLRequest, opts ...grpc.CallOption) (*ReadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadURLResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_ReadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShortenerV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) UserURLs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserURLsResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_UserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShortenerV1_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) WriteURL(ctx context.Context, in *WriteURLRequest, opts ...grpc.CallOption) (*WriteURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteURLResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_WriteURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_Shorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) ShortenBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenBatchResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_ShortenBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) Stats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerV1Server is the server API for ShortenerV1 service.
// All implementations must embed UnimplementedShortenerV1Server
// for forward compatibility.
type ShortenerV1Server interface {
	// public
	ReadURL(context.Context, *ReadURLRequest) (*ReadURLResponse, error)
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// with guard (if there is no valid token returns error 401 Unauthorized)
	UserURLs(context.Context, *empty.Empty) (*UserURLsResponse, error)
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*empty.Empty, error)
	// with secure cookie (if there is no valid token assigns a new token)
	WriteURL(context.Context, *WriteURLRequest) (*WriteURLResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	ShortenBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error)
	// trusted subnet
	Stats(context.Context, *empty.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedShortenerV1Server()
}

// UnimplementedShortenerV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerV1Server struct{}

func (UnimplementedShortenerV1Server) ReadURL(context.Context, *ReadURLRequest) (*ReadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadURL not implemented")
}
func (UnimplementedShortenerV1Server) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerV1Server) UserURLs(context.Context, *empty.Empty) (*UserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserURLs not implemented")
}
func (UnimplementedShortenerV1Server) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedShortenerV1Server) WriteURL(context.Context, *WriteURLRequest) (*WriteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteURL not implemented")
}
func (UnimplementedShortenerV1Server) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShortenerV1Server) ShortenBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenBatch not implemented")
}
func (UnimplementedShortenerV1Server) Stats(context.Context, *empty.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedShortenerV1Server) mustEmbedUnimplementedShortenerV1Server() {}
func (UnimplementedShortenerV1Server) testEmbeddedByValue()                     {}

// UnsafeShortenerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerV1Server will
// result in compilation errors.
type UnsafeShortenerV1Server interface {
	mustEmbedUnimplementedShortenerV1Server()
}

func RegisterShortenerV1Server(s grpc.ServiceRegistrar, srv ShortenerV1Server) {
	// If the following call pancis, it indicates UnimplementedShortenerV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenerV1_ServiceDesc, srv)
}

func _ShortenerV1_ReadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).ReadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_ReadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).ReadURL(ctx, req.(*ReadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_UserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).UserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_UserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).UserURLs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_WriteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).WriteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_WriteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).WriteURL(ctx, req.(*WriteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_ShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).ShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_ShortenBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).ShortenBatch(ctx, req.(*ShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).Stats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerV1_ServiceDesc is the grpc.ServiceDesc for ShortenerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortenergrpcv1.ShortenerV1",
	HandlerType: (*ShortenerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadURL",
			Handler:    _ShortenerV1_ReadURL_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortenerV1_Ping_Handler,
		},
		{
			MethodName: "UserURLs",
			Handler:    _ShortenerV1_UserURLs_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _ShortenerV1_DeleteUserURLs_Handler,
		},
		{
			MethodName: "WriteURL",
			Handler:    _ShortenerV1_WriteURL_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _ShortenerV1_Shorten_Handler,
		},
		{
			MethodName: "ShortenBatch",
			Handler:    _ShortenerV1_ShortenBatch_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _ShortenerV1_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
